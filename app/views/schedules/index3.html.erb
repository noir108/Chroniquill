<div class='index'>
  <div class="calendar">
    <ul class="tabs">
      <li rel="panel-all", class="active", data-category-id="all">
        全体
      </li>
      <% @schedules = @schedules.sort_by { |schedule| schedule.category.id } %>
      <% displayed_category_ids = [] %>
      <% @schedules.each do |schedule| %>
        <% category_id = schedule.category.id %>
        <% if !displayed_category_ids.include?(category_id) %>
          <% displayed_category_ids << category_id %>
          <li rel="panel-<%= category_id %>" data-category-id="<%= category_id %>">
            <%= schedule.category.name %>
          </li>
        <% end %>
      <% end %>
    </ul>
    <div class="calendar-body">
      <div id='calendar'></div>
    </div>
  </div>
</div>

<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>
<script>
$('.tab-panels .tabs li').on('click', function () {
  // タブのアクティブクラスを切り替える処理
  $('.tab-panels .tabs .active').removeClass('active');
  $(this).addClass('active');
  // 選択されたカテゴリーIDを取得
  const paneltoshow = $(this).attr('rel');
  $('.tab-panels .calendar-panel.active').css('max-height', '100').slideUp('100', function () {
    $(this).removeClass('active');
    $('.' + paneltoshow).addClass('active').css('max-height', 'none').hide().slideDown('100');
  });
});


document.addEventListener('DOMContentLoaded', function () {
  var calendarEl = document.getElementById('calendar');
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  const startYear = (currentYear - 2) + '-' + (currentMonth) + '-01'; // 表示する過去の年数
  const endYear = (currentYear + 1) + '-' + (currentMonth) + '-01'; // 表示する未来の年数

  var calendar = new FullCalendar.Calendar(calendarEl, {
    headerToolbar: {
      left: "prev today next",
      center: "title",
      right: "dayGridMonth,timeGridWeek,listWeek",
    },

    // 表示期間
    validRange: function () {
      return {
        start: startYear,
        end: endYear
      };
    },
    contentHeight: 650,
    dayMaxEvents: 2,
    navLinks: true,
    editable: true,
    // Ajaxでデータを取得して予定を表示
    events: function (info, successCallback, failureCallback) {
      $.ajax({
        url: '/schedules', // データを取得するURL
        type: 'GET',
        dataType: 'json',
        success: function (response) {
          // レスポンスを処理するコード
          const events = [];
          for (let i = 0; i < response.length; i++) {
            const schedule = response[i];
            //start_time
            const startDateTime = new Date(schedule.start_time);
            const startYear = startDateTime.getFullYear();
            const startMonth = startDateTime.getMonth() + 1;
            const startDay = startDateTime.getDate();
            const startKey = `${startYear}-${String(startMonth).padStart(2, '0')}-${String(startDay).padStart(2, '0')}`;
            //end_time
            const endDateTime = new Date(schedule.end_time);
            const endYear = endDateTime.getFullYear();
            const endMonth = endDateTime.getMonth() + 1;
            const endDay = endDateTime.getDate();
            const EndKey = `${endYear}-${String(endMonth).padStart(2, '0')}-${String(endDay).padStart(2, '0')}`;
            const eventUrl = window.location.href.toString(); // クリックされたイベントのURLを取得
            // end_timeがある時とない時
            if (schedule.end_time) {
              const event = {
                id: schedule.id,                      // イベントのタイトル
                title: schedule.title,                // イベントのタイトル
                start: startKey,                      // イベントの開始日
                end: EndKey,                          // イベントの終了日
                url: `/schedules/${schedule.id}/edit`, // イベントの編集URL
                classNames: 'event-list'
              };
              events.push(event);
            } else {
              const event = {
                id: schedule.id,
                title: schedule.title,
                start: startKey,
                url: `/schedules/${schedule.id}/edit`,
                classNames: 'event-list'
              };
              events.push(event);
            }
          }
          successCallback(events); // イベントデータをカレンダーに渡す
        },
        error: function (xhr, status, error) {
          // エラーハンドリングのコード
          failureCallback(error); // エラー時の処理
        }
      });
    }
    // Ajaxでデータを取得して予定を表示     ここまで



  });
  calendar.render();
});

</script>